# client deployment file
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      component: web
  template:
    metadata:
      labels:
        component: web
    spec:
      containers:
      - name: client
        #image: rallycoding/multi-client
        image: psnehi/multi-client:v4
        #image: stephengrider/multi-client
        # resources:
        #   limits:
        #     memory: "128Mi"
        #     cpu: "500m"
        ports:
        - containerPort: 3000
---
# client service file
apiVersion: v1
kind: Service
metadata: 
  name: client-cluster-ip-service
spec: 
  type: ClusterIP
  selector: 
    component: web
  ports: 
    - port: 3000        # port outside of world can access
      targetPort: 3000  # port of the client 
---
# server deployment file
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      component: server
  template:
    metadata:
      labels:
        component: server
    spec:
      containers:
        - name: server
          image: psnehi/multi-server:v10
          #image: rallycoding/multi-server
          # resources:
          #   limits:
          #     memory: "128Mi"
          #     cpu: "500m"
          ports:
            - containerPort: 5000
          env: 
            - name: REDIS_HOST
              value: redis-cluster-ip-service
            - name: REDIS_PORT
              value: '6379'
            - name: PGUSER
              value: postgres
            - name: PGHOST
              value: postgres-cluster-ip-service
            - name: PGPORT
              value: '5432'
            - name: PGDATABASE
              value: postgres
            - name: PGPASSWORD
              valueFrom: 
                secretKeyRef:
                  name: pgpasswords 
                  key: PGPASSWORD
# command to create secret
# kubectl create secret generic pgpassword --from-literal PGPASSWORD=postgrespassword
---
# server service file
apiVersion: v1
kind: Service
metadata:
  name: server-cluster-ip-service
spec:
  type: ClusterIP
  selector:
    component: server
  ports:
    - port: 5000
      targetPort: 5000
---
# worker deployment file
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: worker
  template:
    metadata:
      labels:
        component: worker
    spec:
      containers:
        - name: server
          image: rallycoding/multi-worker
          env: 
            - name: REDIS_HOST
              value: redis-cluster-ip-service # name provided in redis-cluster-ip-service
            - name: REDIS_PORT
              value: '6379'
---
# redis deployment file
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: redis
  template:
    metadata:
      labels:
        component: redis
    spec:
      containers:
        - name: redis
          image: redis
          ports:
            - containerPort: 6379
---
# redis service file
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster-ip-service
spec:
  type: ClusterIP
  selector:
    component: redis
  ports:
  - port: 6379
    targetPort: 6379
---
# database persistent volume
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: database-persistent-volume-claim
spec:
  resources:
    requests:
      storage: 2Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
# postgres deployment file
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: postgres
  template:
    metadata:
      labels:
        component: postgres
    spec:
      volumes: 
        - name: postgres-storage
          persistentVolumeClaim: 
            claimName: database-persistent-volume-claim   # name mentioned in the database-persistent-volume-claim.yaml file
      containers:
        - name: postgres
          image: postgres
          ports:
            - containerPort: 5432
          # resources:
          #   limits:
          #     memory: "128Mi"
          #     cpu: "500m"
          volumeMounts: 
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          env: 
            - name: POSTGRES_PASSWORD
              valueFrom: 
                secretKeyRef:
                  key: PGPASSWORD
                  name: pgpasswords
---
# post gres service file
apiVersion: v1
kind: Service
metadata:
  name: postgres-cluster-ip-service
spec:
  type: ClusterIP
  selector:
    component: postgres
  ports:
  - port: 5432
    targetPort: 5432
---
# ingres deployment file
apiVersion: networking.k8s.io/v1
# UPDATE API
kind: Ingress
metadata:
  name: ingress-service
  annotations:
    # REMOVE CLASSNAME ANNOTATION
    nginx.ingress.kubernetes.io/use-regex: 'true'
    # ADD ANNOTATION
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    # ADD ANNOTATION
spec:
  ingressClassName: nginx
  # ADD INGRESSCLASSNAME FIELD
  rules:
    - http:
        paths:
          - path: /?(.*)
            # UPDATE PATH
            pathType: ImplementationSpecific
            # ADD PATHTYPE
            backend:
              service:
                # UPDATE SERVICE FIELDS
                name: client-cluster-ip-service
                port:
                  number: 3000
          - path: /api/?(.*)
            # UPDATE PATH
            pathType: ImplementationSpecific
            # ADD PATHTYPE
            backend:
              service:
                # UPDATE SERVICE FIELDS
                name: server-cluster-ip-service
                port:
                  number: 5000
